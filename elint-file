#!/usr/bin/env bash

# https://github.com/koalaman/shellcheck/issues/667
# shellcheck disable=SC2103
# shellcheck source=/dev/null

# Set options.
set -e
set -o pipefail

# Parse command-line arguments.
checker=$1
file=$2
shift 2
args=("$@")

# Determine the directory containing the elint source code.
elint="$(cd "$(dirname "$0")" && pwd)"

# Abort if not enough arguments given.
if [[ -z $checker ]]; then
    echo "usage: elint-file <checker> [<file>]" 1>&2
    exit 1
fi

# Compute the path to the checker, presuming that it's user-provided.
script=$PWD/elint-config/$checker

# If the checker is user-provided, run it.
if [[ -f $script ]]; then
    if [[ -n $file ]]; then
        ELINT=$elint source "$script" "$file" "${args[@]}" || true
    else
        ELINT=$elint source "$script" "${args[@]}" || true
    fi
    exit 0
fi

# Otherwise, see if the checker is built in, and run it if so.
if [[ -f $elint/checkers/$checker ]]; then
    if [[ -n $file ]]; then
        ELINT=$elint source "$elint/checkers/$checker" \
             "$file" "${args[@]}" || true
    else
        ELINT=$elint source "$elint/checkers/$checker" \
             "${args[@]}" || true
    fi
    exit 0
fi

# Else, print a helpful error message.
if [[ ! -f $script ]]; then
    if [[ -d $script ]]; then
        echo "elint: $script: Is a directory" 1>&2
    elif [[ -L $script ]]; then
        echo "elint: $script: Broken symlink" 1>&2
    else
        echo "elint: $script: No such file or directory" 1>&2
    fi
    exit 1
fi
